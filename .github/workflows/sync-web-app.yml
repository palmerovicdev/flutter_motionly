name: Sync folder to target repo on tag

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      SOURCE_DIR: example/build/web
      TARGET_REPO: palmerovicdev/flutter_motionly_web
      TARGET_BRANCH: main
    steps:
      - name: Checkout source (at tag)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF_NAME}" >> "$GITHUB_ENV"
          else
            echo "VERSION=dev-${GITHUB_SHA::7}" >> "$GITHUB_ENV"
          fi

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Install dependencies
        run: |
          flutter pub get
          cd example
          flutter pub get

      - name: Build web app
        run: |
          cd example
          flutter build web --release --base-href "/"

      - name: Clone target repo
        run: |
          git clone "https://x-access-token:${{ secrets.TARGET_REPO_TOKEN }}@github.com/${TARGET_REPO}.git" target
          cd target
          git checkout "${TARGET_BRANCH}"

      - name: Backup files to preserve
        run: |
          cd target
          # Guardar archivos que no queremos que se borren
          mkdir -p ../preserve
          [ -f package.json ] && cp package.json ../preserve/ || true
          [ -f app.js ] && cp app.js ../preserve/ || true
          [ -f icon_4.png ] && cp icon_4.png ../preserve/ || true
          [ -f nixpacs.toml ] && cp nixpacs.toml ../preserve/ || true

      - name: Sync folder -> target repo (replace all)
        run: |
          # Sincroniza TODO el repo destino con el contenido de SOURCE_DIR
          # --delete asegura que lo que no estÃ© en SOURCE_DIR se borra del destino
          rsync -a --delete --exclude ".git" "${SOURCE_DIR}/" "target/"
          
          # Copia el README del example al repo destino
          cp example/README.md target/README.md

      - name: Restore preserved files
        run: |
          cd target
          # Restaurar archivos preservados
          [ -f ../preserve/package.json ] && cp ../preserve/package.json . || true
          [ -f ../preserve/app.js ] && cp ../preserve/app.js . || true
          [ -f ../preserve/icon_4.png ] && cp ../preserve/icon_4.png . || true
          [ -f ../preserve/nixpacs.toml ] && cp ../preserve/nixpacs.toml . || true

      - name: Commit & push if changes (and tag)
        run: |
          cd target
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          if [[ -n "$(git status --porcelain)" ]]; then
            git add -A
            git commit -m "Sync from ${GITHUB_REPOSITORY}@${GITHUB_SHA} (${VERSION})"
            # Empuja cambios
            git push origin "HEAD:${TARGET_BRANCH}"
            
            # Solo crea tag si el push original fue un tag
            if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              git tag -a "${VERSION}" -m "Release ${VERSION} (synced from ${GITHUB_REPOSITORY})"
              git push origin "${VERSION}"
            fi
          else
            echo "No changes to commit."
            # Solo intenta crear tag si el push original fue un tag
            if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              if ! git rev-parse -q --verify "refs/tags/${VERSION}" >/dev/null; then
                git tag -a "${VERSION}" -m "Release ${VERSION} (no content changes)"
                git push origin "${VERSION}"
              fi
            fi
          fi